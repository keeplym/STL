1. 创建数组

但是可以如下所示，将它们初始化为 0 或者和默认元素类型等效的值：
std::array<double, 100> data {};
使用该语句初始化后，容器中所有的元素都会变为 0.0

std::array<double, 10> values {0.5, 1.0, 1.5, 2.0};


通过调用数组对象的成员函数 fill()，可以将所有元素设成给定值。例如：
values.fill(3.1415926);
fill() 函数将所有元素都设为传入的实参值。

2.访问元素

如果使用越界的索引值去访问或存储元素，就不会被检测到。为了能够检查越界索引值，应该使用成员函数 at():

values.at (4) = values.at(3) + 2.O*values.at(1);

当传给 at() 的索引是一个越界值时，这时会抛出 std::out_of_rang 异常。应该总是使用 at()，除非确定索引没有越界。
这也产生了一个疑问，为什么 operator[]() 的实现没有进行边界检查？答案是因为性能。
如果每次访问元素，都去检查索引值，无疑会产生很多开销。当不存在越界访问的可能时，就能避免这种开销。